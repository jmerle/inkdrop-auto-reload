{"version":3,"sources":["../src/index.js"],"names":["watcher","commandListener","reloadQueued","doReload","inkdrop","commands","add","document","body","packages","reset","window","reload","dispatch","path","packageName","exec","disabled","isPackageDisabled","reloadDisabled","config","get","reloadImmediately","focused","isFocused","once","title","description","type","default","activate","chokidar","watch","getPackageDirPaths","ignoreInitial","ignored","includes","on","deactivate","close","dispose"],"mappings":"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","sourcesContent":["import chokidar from 'chokidar';\n\nlet watcher = null;\nlet commandListener = null;\n\nlet reloadQueued = false;\n\nfunction doReload() {\n  commandListener = inkdrop.commands.add(document.body, {\n    'core:save-note': () => {\n      inkdrop.packages.reset();\n      inkdrop.window.reload();\n    },\n  });\n\n  inkdrop.commands.dispatch(document.body, 'core:save-note');\n}\n\nfunction reload(path) {\n  if (reloadQueued) {\n    return;\n  }\n\n  const packageName = /packages\\/([^/\\\\]+)/.exec(path)[1];\n  const disabled = inkdrop.packages.isPackageDisabled(packageName);\n  const reloadDisabled = inkdrop.config.get('auto-reload.reloadDisabled');\n\n  if (disabled && !reloadDisabled) {\n    return;\n  }\n\n  reloadQueued = true;\n\n  const reloadImmediately = inkdrop.config.get('auto-reload.reloadImmediately');\n  const focused = inkdrop.window.isFocused();\n\n  if (reloadImmediately || focused) {\n    doReload();\n  } else {\n    inkdrop.window.once('focus', () => {\n      doReload();\n    });\n  }\n}\n\nexport const config = {\n  reloadImmediately: {\n    title: 'Reload immediately when a change has been detected',\n    description:\n      'When disabled reloading is postponed until Inkdrop is given focus. Reloading causes Inkdrop to steal focus from other applications, which can be quite annoying.',\n    type: 'boolean',\n    default: false,\n  },\n  reloadDisabled: {\n    title: 'Reload when a change in a disabled plugin has been detected',\n    type: 'boolean',\n    default: false,\n  },\n};\n\nexport function activate() {\n  watcher = chokidar.watch(inkdrop.packages.getPackageDirPaths(), {\n    ignoreInitial: true,\n    ignored: path => path.includes('.git/') || path.includes('node_modules/'),\n  });\n\n  watcher\n    .on('add', path => reload(path))\n    .on('change', path => reload(path))\n    .on('unlink', path => reload(path));\n}\n\nexport function deactivate() {\n  if (watcher !== null) {\n    watcher.close();\n    watcher = null;\n  }\n\n  if (commandListener !== null) {\n    commandListener.dispose();\n    commandListener = null;\n  }\n}\n"],"file":"index.js"}