{"version":3,"sources":["../src/index.js"],"names":["watcher","reloadCalled","doReload","inkdrop","commands","add","document","body","window","reload","dispatch","reloadImmediately","config","get","focused","isFocused","once","title","type","default","activate","chokidar","watch","packages","getPackageDirPaths","ignoreInitial","ignored","path","includes","on","deactivate","close"],"mappings":";;;;;;;;;AAAA;;;;AAEA,IAAIA,OAAO,GAAG,IAAd;AACA,IAAIC,YAAY,GAAG,KAAnB;;AAEA,SAASC,QAAT,GAAoB;AAClBC,EAAAA,OAAO,CAACC,QAAR,CAAiBC,GAAjB,CAAqBC,QAAQ,CAACC,IAA9B,EAAoC;AAClC,sBAAkB,MAAMJ,OAAO,CAACK,MAAR,CAAeC,MAAf;AADU,GAApC;AAIAN,EAAAA,OAAO,CAACC,QAAR,CAAiBM,QAAjB,CAA0BJ,QAAQ,CAACC,IAAnC,EAAyC,gBAAzC;AACD;;AAED,SAASE,MAAT,GAAkB;AAChB,MAAIR,YAAJ,EAAkB;AAChB;AACD;;AAEDA,EAAAA,YAAY,GAAG,IAAf;AAEA,QAAMU,iBAAiB,GAAGR,OAAO,CAACS,MAAR,CAAeC,GAAf,CAAmB,+BAAnB,CAA1B;AACA,QAAMC,OAAO,GAAGX,OAAO,CAACK,MAAR,CAAeO,SAAf,EAAhB;;AAEA,MAAIJ,iBAAiB,IAAIG,OAAzB,EAAkC;AAChCZ,IAAAA,QAAQ;AACT,GAFD,MAEO;AACLC,IAAAA,OAAO,CAACK,MAAR,CAAeQ,IAAf,CAAoB,OAApB,EAA6B,MAAM;AACjCd,MAAAA,QAAQ;AACT,KAFD;AAGD;AACF;;AAEM,MAAMU,MAAM,GAAG;AACpBD,EAAAA,iBAAiB,EAAE;AACjBM,IAAAA,KAAK,EAAE,8CADU;AAEjBC,IAAAA,IAAI,EAAE,SAFW;AAGjBC,IAAAA,OAAO,EAAE;AAHQ;AADC,CAAf;;;AAQA,SAASC,QAAT,GAAoB;AACzBpB,EAAAA,OAAO,GAAGqB,kBAASC,KAAT,CAAenB,OAAO,CAACoB,QAAR,CAAiBC,kBAAjB,EAAf,EAAsD;AAC9DC,IAAAA,aAAa,EAAE,IAD+C;AAE9DC,IAAAA,OAAO,EAAEC,IAAI,IAAIA,IAAI,CAACC,QAAL,CAAc,OAAd,KAA0BD,IAAI,CAACC,QAAL,CAAc,eAAd;AAFmB,GAAtD,CAAV;AAKA5B,EAAAA,OAAO,CACJ6B,EADH,CACM,KADN,EACa,MAAMpB,MAAM,EADzB,EAEGoB,EAFH,CAEM,QAFN,EAEgB,MAAMpB,MAAM,EAF5B,EAGGoB,EAHH,CAGM,QAHN,EAGgB,MAAMpB,MAAM,EAH5B;AAID;;AAEM,SAASqB,UAAT,GAAsB;AAC3B,MAAI9B,OAAO,KAAK,IAAhB,EAAsB;AACpBA,IAAAA,OAAO,CAAC+B,KAAR;AACA/B,IAAAA,OAAO,GAAG,IAAV;AACD;AACF","sourcesContent":["import chokidar from 'chokidar';\n\nlet watcher = null;\nlet reloadCalled = false;\n\nfunction doReload() {\n  inkdrop.commands.add(document.body, {\n    'core:save-note': () => inkdrop.window.reload(),\n  });\n\n  inkdrop.commands.dispatch(document.body, 'core:save-note');\n}\n\nfunction reload() {\n  if (reloadCalled) {\n    return;\n  }\n\n  reloadCalled = true;\n\n  const reloadImmediately = inkdrop.config.get('auto-reload.reloadImmediately');\n  const focused = inkdrop.window.isFocused();\n\n  if (reloadImmediately || focused) {\n    doReload();\n  } else {\n    inkdrop.window.once('focus', () => {\n      doReload();\n    });\n  }\n}\n\nexport const config = {\n  reloadImmediately: {\n    title: 'Reload immediately when a change is detected',\n    type: 'boolean',\n    default: false,\n  },\n};\n\nexport function activate() {\n  watcher = chokidar.watch(inkdrop.packages.getPackageDirPaths(), {\n    ignoreInitial: true,\n    ignored: path => path.includes('.git/') || path.includes('node_modules/'),\n  });\n\n  watcher\n    .on('add', () => reload())\n    .on('change', () => reload())\n    .on('unlink', () => reload());\n}\n\nexport function deactivate() {\n  if (watcher !== null) {\n    watcher.close();\n    watcher = null;\n  }\n}\n"],"file":"index.js"}